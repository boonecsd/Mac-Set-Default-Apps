#!/usr/bin/python

"""\
Directly modifies launchservices plists to set default file associations in macOS.

A somewhat complete list of UTI's can be found here:
	https://escapetech.eu/manuals/qdrop/uti.html\
"""

from __future__ import print_function

import os, shutil, subprocess, sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from plistlib import readPlist, writePlist
from tempfile import NamedTemporaryFile

__author__ = 'David G. Rosenberg'
__copyright__ = 'Copyright (c), Mac Set Default Apps'
__license__ = 'MIT'
__version__ = '1.0.0'
__email__ = 'dgrosenberg@icloud.com'

# Settings
PLIST_NAME = 'com.apple.launchservices.secure.plist'
TMP_PREFIX = 'msda_tmp_'

# Functions
def process_args(arguments):
	parser = ArgumentParser(
		description=__doc__,
		formatter_class=RawDescriptionHelpFormatter,
		epilog='Please email {} with any issues'.format(
			__email__,
		)
	)
	parser.add_argument(
		'app_id',
		help='the identifier of the application to set as a default',
		type=str,
	)
	parser.add_argument(
		'-p', '--protocol',
		help='protocols to associate with the given app ID',
		action='append',
	)
	parser.add_argument(
		'-u', '--uti',
		help='UTIs and roles to associate with the given app ID',
		action='append',
		nargs=2,
		metavar=('UTI', 'ROLE'),
	)
	parser.add_argument(
		'-v', '--verbose',
		help='verbose output',
		action='store_true',
	)
	parser.add_argument(
		'-V', '--version',
		help='display version number',
		action='version',
	)

	return parser.parse_args(arguments)

def _create_plist_parents(plist_path):
	"""
	Creates the directory structure if the provided PList doesn't exist
	"""
	if os.path.isfile(plist_path):
		return False
	parent_path = os.path.dirname(plist_path)
	if os.path.exists(parent_path):
		return False

	import errno
	try:
		os.makedirs(parent_path)
	except OSError as e:
		if e.errno != errno.EEXIST:
			raise
	return plist_path


# Classes
class LaunchServices(object):

	def __init__(self):
		self.lshandlers = []

	def __iter__(self):
		yield ('LSHandlers', self.lshandlers)

	def read(self, plist_path):
		if not os.path.isfile(plist_path):
			return { 'LSHandlers': [] }

		filename = os.path.basename(plist_path)
		with NamedTemporaryFile(prefix=TMP_PREFIX, delete=True) as tmp_plist:
			tmp_path = tmp_plist.name
			shutil.copyfile(plist_path, tmp_path)
			convert_command = '/usr/bin/plutil -convert xml1 ' + tmp_path
			subprocess.check_output(convert_command.split())
			plist = readPlist(tmp_path)
		self.lshandlers = plist['LSHandlers']

	def write(self, plist_path):
		_create_plist_parents(plist_path)

		filename = os.path.basename(plist_path)
		with NamedTemporaryFile(prefix=TMP_PREFIX, delete=True) as tmp_plist:
			tmp_path = tmp_plist.name
			writePlist(dict(self), tmp_path)
			convert_command = '/usr/bin/plutil -convert binary1 ' + tmp_path
			subprocess.check_output(convert_command.split())
			shutil.copyfile(tmp_path, plist_path)
		return plist_path


class LSHandler(object):

	def __init__(self, **kwargs):
		self.app_id = kwargs['app_id'].lower()
		self.uti = kwargs['uti'].lower()

		if '.' in self.uti:
			self._type = 'ContentType'
			self.role = kwargs.get('role', 'all').lower()
		else:
			self._type = 'URLScheme'
			self.role = 'all'

	@property
	def _role_key(self):
		return 'LSHandlerRole' + self.role.capitalize()

	def __iter__(self):
		yield ('LSHandler' + self._type, self.uti)
		yield (self._role_key, self.app_id)
		yield ('LSHandlerPreferredVersions', { self._role_key: '-' })


def main(arguments):
	args = process_args(arguments)
	print(args)

if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))
