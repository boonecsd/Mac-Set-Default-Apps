#!/usr/bin/python

"""\
Directly modifies launchservices plists to set default file associations in macOS.

A somewhat complete list of UTI's can be found here:
	https://escapetech.eu/manuals/qdrop/uti.html\
"""

from __future__ import print_function

import os, shutil, subprocess, sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from plistlib import readPlist
from tempfile import NamedTemporaryFile

__author__ = 'David G. Rosenberg'
__copyright__ = 'Copyright (c), Mac Set Default Apps'
__license__ = 'MTI'
__version__ = '1.0.0'
__email__ = 'dgrosenberg@icloud.com'

# Settings
PLIST_NAME = 'com.apple.launchservices.secure.plist'
PLIST_BASE = {'LSHandlers': []}
TMP_PREFIX = 'msda_tmp_'

# Functions
def process_args(arguments):
	parser = ArgumentParser(
		description=__doc__,
		formatter_class=RawDescriptionHelpFormatter,
		epilog='Please email {} with any issues'.format(
			__email__,
		)
	)
	parser.add_argument(
		'app_id',
		help='the identifier of the application to set as a default',
		type=str,
	)
	parser.add_argument(
		'-p', '--protocol',
		help='protocols to associate with the given app ID',
		action='append',
	)
	parser.add_argument(
		'-u', '--uti',
		help='UTIs and roles to associate with the given app ID',
		action='append',
		nargs=2,
		metavar=('UTI', 'ROLE'),
	)
	parser.add_argument(
		'-v', '--verbose',
		help='verbose output',
		action='store_true',
	)
	parser.add_argument(
		'-V', '--version',
		help='display version number',
		action='version',
	)

	return parser.parse_args(arguments)

def is_uti(string):
	if '.' in string:
		return True
	return False

def _create_plist_parents(plist_path):
	"""
	Creates the directory structure if the provided PList doesn't exist
	"""
	if not os.path.isfile(plist_path):
		parent_path = os.path.dirname(plist_path)
		if not os.path.exists(parent_path):
			import errno
			try:
				os.makedirs(parent_path)
			except OSError as e:
				if e.errno != errno.EEXIST:
					raise

def read_binary_plist(plist_path):
	"""
	Converts a binary PList to XML and returns it
	"""
	if not os.path.isfile(plist_path):
		return PLIST_BASE

	filename = os.path.basename(plist_path)
	with NamedTemporaryFile(prefix=TMP_PREFIX, delete=True) as tmp_plist:
		tmp_path = tmp_plist.name
		shutil.copyfile(plist_path, tmp_path)
		convert_command = '/usr/bin/plutil -convert xml1 ' + tmp_path
		subprocess.check_output(convert_command.split())
		plist = readPlist(tmp_path)
	return plist

def write_binary_plist():
	"""
	Saves a dictionary to a binary plist
	"""
	pass

def main(arguments):
	args = process_args(arguments)
	print(args)

if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))
