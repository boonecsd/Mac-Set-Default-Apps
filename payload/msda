#!/usr/bin/python

"""\
Directly modifies launchservices plists to set default file associations in macOS.

A somewhat complete list of UTI's can be found here:
	https://escapetech.eu/manuals/qdrop/uti.html\
"""

from __future__ import print_function

import os, shutil, subprocess, sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from plistlib import readPlist, writePlist
from tempfile import NamedTemporaryFile

__author__ = 'David G. Rosenberg'
__copyright__ = 'Copyright (c), Mac Set Default Apps'
__license__ = 'MIT'
__version__ = '1.0.0'
__email__ = 'dgrosenberg@icloud.com'

# Settings
PLIST_NAME = 'com.apple.launchservices.secure.plist'
TMP_PREFIX = 'msda_tmp_'

# Functions
def process_args(arguments):
	parser = ArgumentParser(
		description=__doc__,
		formatter_class=RawDescriptionHelpFormatter,
		epilog='Please email {} with any issues'.format(
			__email__,
		)
	)
	parser.add_argument(
		'app_id',
		help='the identifier of the application to set as a default',
		type=str,
	)
	parser.add_argument(
		'-p', '--protocol',
		help='protocols to associate with the given app ID',
		action='append',
	)
	parser.add_argument(
		'-u', '--uti',
		help='UTIs and roles to associate with the given app ID',
		action='append',
		nargs=2,
		metavar=('UTI', 'ROLE'),
	)
	parser.add_argument(
		'-v', '--verbose',
		help='verbose output',
		action='store_true',
	)
	parser.add_argument(
		'--version',
		help='display version number',
		action='version',
	)

	return parser.parse_args(arguments)

def _create_plist_parents(plist_path):
	"""
	Creates the directory structure if the provided PList doesn't exist
	"""
	if os.path.isfile(plist_path):
		return False
	parent_path = os.path.dirname(plist_path)
	if os.path.exists(parent_path):
		return False

	import errno
	try:
		os.makedirs(parent_path)
	except OSError as e:
		if e.errno != errno.EEXIST:
			raise
	return plist_path


# Classes
class LSHandler(object):

	def _from_dict(self, from_dict):
		self.role = from_dict['LSHandlerPreferredVersions'].keys()[0]
		self.role = self.role[13:].lower()
		try:
			self.uti = from_dict['LSHandlerContentType'].lower()
			self._type = 'ContentType'
		except KeyError as e:
			self.uti = from_dict['LSHandlerURLScheme'].lower()
			self._type = 'URLScheme'
		self.app_id = from_dict[self._role_key].lower()

	def _from_properties(self, **kwargs):
		self.app_id = kwargs['app_id'].lower()
		self.uti = kwargs['uti'].lower()

		if '.' in self.uti:
			self._type = 'ContentType'
			self.role = kwargs.get('role', 'all').lower()
		else:
			self._type = 'URLScheme'
			self.role = 'all'

	def __init__(self, **kwargs):
		if 'from_dict' in kwargs.keys():
			self._from_dict(kwargs['from_dict'])
		else:
			self._from_properties(**kwargs)

	@property
	def _role_key(self):
		return 'LSHandlerRole' + self.role.capitalize()

	def __eq__(self, other):
		compare_utis = self.uti == other.uti
		if self.role == 'all' or other.role == 'all':
			compare_roles = True
		else:
			compare_roles = self.role == other.role
		return compare_utis and compare_roles

	def __ne__(self, other):
		return not self == other

	def __iter__(self):
		yield ('LSHandler' + self._type, self.uti)
		yield (self._role_key, self.app_id)
		yield ('LSHandlerPreferredVersions', { self._role_key: '-' })


class LaunchServices(object):

	def __init__(self, plist=None):
		self.handlers = []
		self.plist = plist

		if self.plist:
			self.read()

	def __iter__(self):
		yield ('LSHandlers', [ dict(h) for h in self.handlers ])

	def read(self):
		if not os.path.isfile(self.plist):
			return

		filename = os.path.basename(self.plist)
		with NamedTemporaryFile(prefix=TMP_PREFIX, delete=True) as tmp_plist:
			tmp_path = tmp_plist.name
			shutil.copyfile(self.plist, tmp_path)
			convert_command = '/usr/bin/plutil -convert xml1 ' + tmp_path
			subprocess.check_output(convert_command.split())
			plist = readPlist(tmp_path)

		for lshandler in plist['LSHandlers']:
			self.handlers.append(LSHandler(from_dict=lshandler))

	def write(self, plist=None):
		if not plist:
			plist = self.plist

		_create_plist_parents(plist)

		filename = os.path.basename(plist)
		with NamedTemporaryFile(prefix=TMP_PREFIX, delete=True) as tmp_plist:
			tmp_path = tmp_plist.name
			writePlist(dict(self), tmp_path)
			convert_command = '/usr/bin/plutil -convert binary1 ' + tmp_path
			subprocess.check_output(convert_command.split())
			shutil.copyfile(tmp_path, plist)

	@property
	def app_ids(self):
		collected_app_ids = [ h.app_id for h in self.handlers ]
		return set(collected_app_ids)

	def set_handler(self, **kwargs):
		new_lshandler = LSHandler(**kwargs)
		self.handlers = [ h for h in self.handlers if h != new_lshandler ]
		self.handlers.append(new_lshandler)
		return new_lshandler


def main(arguments):
	args = process_args(arguments)
	print(args)

if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))
